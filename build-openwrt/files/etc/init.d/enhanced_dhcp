#!/bin/sh /etc/rc.common

START=60
STOP=15

USE_PROCD=1
PROG=/usr/sbin/enhanced_dhcp_daemon

CONFIG_FILE="/etc/config/enhanced_dhcp"
PID_FILE="/var/run/enhanced_dhcp.pid"
LOG_FILE="/var/log/enhanced_dhcp.log"

start_service() {
	# Check if enhanced_dhcp config exists
	[ ! -f "$CONFIG_FILE" ] && {
		echo "Enhanced DHCP configuration not found, creating default..."
		create_default_config
	}
	
	# Ensure log directory exists with proper permissions
	mkdir -p $(dirname $LOG_FILE)
	chmod 755 $(dirname $LOG_FILE)
	
	# Create log file with restricted permissions if it doesn't exist
	[ ! -f "$LOG_FILE" ] && {
		touch "$LOG_FILE"
		chmod 640 "$LOG_FILE"
	}
	
	# Initialize enhanced DHCP settings
	init_enhanced_dhcp
	
	echo "Enhanced DHCP service started"
}

stop_service() {
	echo "Enhanced DHCP service stopped"
}

reload_service() {
	echo "Reloading Enhanced DHCP configuration..."
	init_enhanced_dhcp
	
	# Restart dnsmasq to apply changes
	/etc/init.d/dnsmasq restart
	
	echo "Enhanced DHCP configuration reloaded"
}

create_default_config() {
	uci -q batch <<-EOF
		set enhanced_dhcp.global=global
		set enhanced_dhcp.global.initialized='1'
		set enhanced_dhcp.global.version='1.0.0'
		set enhanced_dhcp.global.auto_discovery='1'
		set enhanced_dhcp.global.log_level='info'
		
		set enhanced_dhcp.settings=settings
		set enhanced_dhcp.settings.enable_device_discovery='1'
		set enhanced_dhcp.settings.discovery_interval='30'
		set enhanced_dhcp.settings.auto_apply_default_tag='1'
		set enhanced_dhcp.settings.backup_on_change='1'
		set enhanced_dhcp.settings.max_backup_files='10'
		
		set enhanced_dhcp.ui=ui
		set enhanced_dhcp.ui.refresh_interval='30'
		set enhanced_dhcp.ui.show_offline_devices='1'
		set enhanced_dhcp.ui.show_lease_time='1'
		set enhanced_dhcp.ui.compact_view='0'
		
		set enhanced_dhcp.logging=logging
		set enhanced_dhcp.logging.enable_audit_log='1'
		set enhanced_dhcp.logging.log_tag_changes='1'
		set enhanced_dhcp.logging.log_device_changes='1'
		set enhanced_dhcp.logging.max_log_size='1024'
		
		commit enhanced_dhcp
	EOF
}

init_enhanced_dhcp() {
	local enabled
	local auto_discovery
	local backup_enabled
	
	# Load configuration
	config_load enhanced_dhcp
	
	config_get enabled global initialized
	config_get auto_discovery settings enable_device_discovery
	config_get backup_enabled settings backup_on_change
	
	# Ensure essential settings are applied
	if [ "$enabled" = "1" ]; then
		log_message "info" "Enhanced DHCP is enabled"
		
		# Setup automatic device discovery if enabled
		if [ "$auto_discovery" = "1" ]; then
			setup_device_discovery
		fi
		
		# Setup configuration backup if enabled
		if [ "$backup_enabled" = "1" ]; then
			setup_config_backup
		fi
		
		# Validate DHCP configuration
		validate_dhcp_config
		
		# Apply any pending configuration changes
		apply_pending_changes
	else
		log_message "warn" "Enhanced DHCP is not properly initialized"
	fi
}

setup_device_discovery() {
	local discovery_interval
	config_get discovery_interval settings discovery_interval
	
	# Create discovery script if it doesn't exist
	cat > /usr/share/dhcp_manager/discovery.sh <<-EOF
#!/bin/sh
# Enhanced DHCP Device Discovery Script
LOGFILE="/var/log/enhanced_dhcp.log"
echo "\$(date): Running device discovery" >> \$LOGFILE
# Add discovery logic here if needed
EOF
	
	chmod +x /usr/share/dhcp_manager/discovery.sh
	log_message "info" "Device discovery enabled with interval: ${discovery_interval}s"
}

setup_config_backup() {
	local max_backups
	config_get max_backups settings max_backup_files
	
	# Create backup directory
	mkdir -p /etc/config/enhanced_dhcp_backups
	
	# Create backup script
	cat > /usr/share/dhcp_manager/backup.sh <<-EOF
#!/bin/sh
# Enhanced DHCP Configuration Backup Script
BACKUP_DIR="/etc/config/enhanced_dhcp_backups"
TIMESTAMP=\$(date +%Y%m%d_%H%M%S)

# Backup current configuration
cp /etc/config/dhcp "\$BACKUP_DIR/dhcp_\$TIMESTAMP.backup"
cp /etc/config/enhanced_dhcp "\$BACKUP_DIR/enhanced_dhcp_\$TIMESTAMP.backup"

# Clean old backups (keep only max_backups files)
cd "\$BACKUP_DIR"
ls -t dhcp_*.backup | tail -n +$((max_backups + 1)) | xargs rm -f 2>/dev/null || true
ls -t enhanced_dhcp_*.backup | tail -n +$((max_backups + 1)) | xargs rm -f 2>/dev/null || true

echo "\$(date): Configuration backup created" >> /var/log/enhanced_dhcp.log
EOF
	
	chmod +x /usr/share/dhcp_manager/backup.sh
	log_message "info" "Configuration backup enabled (max: $max_backups files)"
}

validate_dhcp_config() {
	local error_count=0
	
	# Check for duplicate MAC addresses
	local macs=$(uci show dhcp | grep "\.mac=" | cut -d"'" -f2 | sort)
	local duplicate_macs=$(echo "$macs" | uniq -d)
	
	if [ -n "$duplicate_macs" ]; then
		log_message "error" "Duplicate MAC addresses found: $duplicate_macs"
		error_count=$((error_count + 1))
	fi
	
	# Check for invalid tag references
	uci -q foreach dhcp host '
		tag=$(uci -q get dhcp.$1.tag)
		if [ -n "$tag" ] && [ "$tag" != "default" ]; then
			if ! uci -q get dhcp.$tag >/dev/null 2>&1; then
				echo "Invalid tag reference: $tag in host $1" >&2
				error_count=$((error_count + 1))
			fi
		fi
	'
	
	if [ $error_count -eq 0 ]; then
		log_message "info" "DHCP configuration validation passed"
	else
		log_message "warn" "DHCP configuration validation found $error_count issues"
	fi
	
	return $error_count
}

apply_pending_changes() {
	# Check if there are any pending changes that need to be applied
	local needs_restart=0
	
	# Check if dnsmasq needs restart
	if [ -f /tmp/enhanced_dhcp_restart_needed ]; then
		log_message "info" "Applying pending DHCP changes"
		/etc/init.d/dnsmasq restart
		rm -f /tmp/enhanced_dhcp_restart_needed
		needs_restart=1
	fi
	
	return $needs_restart
}

log_message() {
	local level="$1"
	local message="$2"
	local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
	
	# Check if logging is enabled
	local logging_enabled
	config_get logging_enabled logging enable_audit_log
	
	if [ "$logging_enabled" = "1" ]; then
		echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
		
		# Also log to system log for important messages
		case "$level" in
			"error") logger -t enhanced_dhcp -p daemon.err "$message" ;;
			"warn") logger -t enhanced_dhcp -p daemon.warning "$message" ;;
			"info") logger -t enhanced_dhcp -p daemon.info "$message" ;;
		esac
	fi
	
	# Rotate log if it gets too large
	rotate_log_if_needed
}

rotate_log_if_needed() {
	local max_size
	config_get max_size logging max_log_size
	
	if [ -f "$LOG_FILE" ]; then
		local size_kb=$(du -k "$LOG_FILE" | cut -f1)
		if [ "$size_kb" -gt "$max_size" ]; then
			mv "$LOG_FILE" "${LOG_FILE}.old"
			touch "$LOG_FILE"
			log_message "info" "Log file rotated (size: ${size_kb}KB)"
		fi
	fi
}

# Service management functions
service_triggers() {
	procd_add_reload_trigger "enhanced_dhcp"
	procd_add_reload_trigger "dhcp"
}

# Handle UCI configuration changes
config_changed() {
	log_message "info" "Configuration changed, marking for restart"
	touch /tmp/enhanced_dhcp_restart_needed
}

# Backup configuration before making changes
backup_config() {
	local backup_enabled
	config_get backup_enabled settings backup_on_change
	
	if [ "$backup_enabled" = "1" ] && [ -x /usr/share/dhcp_manager/backup.sh ]; then
		/usr/share/dhcp_manager/backup.sh
	fi
}

# Health check function
health_check() {
	validate_dhcp_config
	local result=$?
	
	if [ $result -eq 0 ]; then
		echo "Enhanced DHCP: Healthy"
	else
		echo "Enhanced DHCP: Issues detected ($result errors)"
	fi
	
	return $result
}

# Status function
status() {
	echo "Enhanced DHCP Status:"
	echo "===================="
	
	local enabled
	config_get enabled global initialized
	echo "Status: $([ "$enabled" = "1" ] && echo "Enabled" || echo "Disabled")"
	
	if [ -f "$LOG_FILE" ]; then
		echo "Log file: $LOG_FILE ($(du -h "$LOG_FILE" | cut -f1))"
		echo "Last 5 log entries:"
		tail -5 "$LOG_FILE" | sed 's/^/  /'
	else
		echo "Log file: Not found"
	fi
	
	echo ""
	health_check
}

# Command handling
case "$1" in
	backup)
		backup_config
		;;
	health)
		health_check
		;;
	status)
		status
		;;
	*)
		# Default behavior
		;;
esac