<%#
Enhanced DHCP Manager - Quick Assignment Template
%>

<div class="cbi-section-node">
	<div style="background: #e9ecef; padding: 15px; border-radius: 5px;">
		<h4 style="margin-top: 0;"><%:Quick Tag Assignment%></h4>
		<p><%:Select multiple devices and apply a DHCP tag to all of them at once.%></p>
		
		<div style="margin-bottom: 15px;">
			<label><%:Select Tag:%> </label>
			<select id="quick-tag-select" style="margin-right: 10px;">
				<option value="default"><%:Default%></option>
				<%
				local uci = require "luci.model.uci".cursor()
				uci:foreach("dhcp", "tag", function(section)
					local tag_name = section[".name"]
				%>
				<option value="<%=tag_name%>"><%=tag_name%></option>
				<% end) %>
			</select>
			
			<input type="button" class="cbi-button cbi-button-action" value="<%:Apply to Selected%>" 
				onclick="applyTagToSelectedDevices()" />
		</div>
		
		<div style="margin-bottom: 10px;">
			<input type="button" class="cbi-button cbi-button-neutral" value="<%:Select All%>" 
				onclick="selectAllDeviceCheckboxes()" />
			<input type="button" class="cbi-button cbi-button-neutral" value="<%:Select None%>" 
				onclick="selectNoneDeviceCheckboxes()" />
			<input type="button" class="cbi-button cbi-button-neutral" value="<%:Select Online Only%>" 
				onclick="selectOnlineDevices()" />
		</div>
		
		<div id="quick-assign-status" style="display: none; margin-top: 10px; padding: 8px; border-radius: 3px;">
			<span id="quick-assign-message"></span>
		</div>
	</div>
</div>

<script type="text/javascript">
// Add checkboxes to device table rows
document.addEventListener('DOMContentLoaded', function() {
	addDeviceCheckboxes();
});

function addDeviceCheckboxes() {
	// Find the device table
	var table = document.querySelector('.cbi-section-table');
	if (!table) return;
	
	// Add header checkbox
	var headerRow = table.querySelector('.cbi-section-table-titles');
	if (headerRow && !headerRow.querySelector('.checkbox-cell')) {
		var headerCell = document.createElement('div');
		headerCell.className = 'th cbi-section-table-cell checkbox-cell';
		headerCell.style.width = '40px';
		headerCell.innerHTML = '<input type="checkbox" id="select-all-checkbox" onchange="toggleAllDeviceCheckboxes(this.checked)" />';
		headerRow.insertBefore(headerCell, headerRow.firstChild);
	}
	
	// Add checkboxes to each device row
	var deviceRows = table.querySelectorAll('.cbi-section-table-row');
	deviceRows.forEach(function(row, index) {
		if (!row.querySelector('.checkbox-cell')) {
			var cell = document.createElement('div');
			cell.className = 'td cbi-section-table-cell checkbox-cell';
			cell.style.width = '40px';
			cell.innerHTML = '<input type="checkbox" class="device-checkbox" data-row-index="' + index + '" />';
			row.insertBefore(cell, row.firstChild);
		}
	});
}

function selectAllDeviceCheckboxes() {
	var checkboxes = document.querySelectorAll('.device-checkbox');
	checkboxes.forEach(function(cb) {
		cb.checked = true;
	});
	updateSelectAllCheckbox();
}

function selectNoneDeviceCheckboxes() {
	var checkboxes = document.querySelectorAll('.device-checkbox');
	checkboxes.forEach(function(cb) {
		cb.checked = false;
	});
	updateSelectAllCheckbox();
}

function selectOnlineDevices() {
	var checkboxes = document.querySelectorAll('.device-checkbox');
	checkboxes.forEach(function(cb) {
		var row = cb.closest('.tr');
		var statusCell = row.querySelector('.td:last-child');
		if (statusCell && statusCell.textContent.trim().includes('Online')) {
			cb.checked = true;
		} else {
			cb.checked = false;
		}
	});
	updateSelectAllCheckbox();
}

function toggleAllDeviceCheckboxes(checked) {
	var checkboxes = document.querySelectorAll('.device-checkbox');
	checkboxes.forEach(function(cb) {
		cb.checked = checked;
	});
}

function updateSelectAllCheckbox() {
	var allCheckboxes = document.querySelectorAll('.device-checkbox');
	var checkedCheckboxes = document.querySelectorAll('.device-checkbox:checked');
	var selectAllCheckbox = document.getElementById('select-all-checkbox');
	
	if (selectAllCheckbox) {
		selectAllCheckbox.checked = allCheckboxes.length === checkedCheckboxes.length;
		selectAllCheckbox.indeterminate = checkedCheckboxes.length > 0 && checkedCheckboxes.length < allCheckboxes.length;
	}
}

function applyTagToSelectedDevices() {
	var selectedTag = document.getElementById('quick-tag-select').value;
	var checkedBoxes = document.querySelectorAll('.device-checkbox:checked');
	var statusDiv = document.getElementById('quick-assign-status');
	var messageSpan = document.getElementById('quick-assign-message');
	
	if (checkedBoxes.length === 0) {
		showQuickAssignMessage('<%:Please select at least one device%>', 'error');
		return;
	}
	
	var successCount = 0;
	var totalCount = checkedBoxes.length;
	
	showQuickAssignMessage('<%:Applying tag to %> ' + totalCount + ' <%: devices...%>', 'info');
	
	// Process each selected device
	checkedBoxes.forEach(function(checkbox, index) {
		var row = checkbox.closest('.tr');
		var macCell = row.querySelector('code');
		var nameInput = row.querySelector('input[name*="name"]');
		var tagSelect = row.querySelector('select[name*="tag"]');
		
		if (macCell && tagSelect) {
			var mac = macCell.textContent;
			var name = nameInput ? nameInput.value : 'Unknown';
			
			// Update the dropdown
			tagSelect.value = selectedTag;
			
			// Make AJAX request to apply the tag
			applyTagToDevice(mac, selectedTag, name, function(success) {
				if (success) {
					successCount++;
					// Visual feedback
					row.style.background = '#d4edda';
					setTimeout(function() {
						row.style.background = '';
					}, 2000);
				}
				
				// Check if all requests are complete
				if (index === totalCount - 1) {
					var message = successCount + ' <%: of %> ' + totalCount + ' <%: devices updated successfully%>';
					showQuickAssignMessage(message, successCount === totalCount ? 'success' : 'warning');
				}
			});
		}
	});
}

function applyTagToDevice(mac, tag, name, callback) {
	var xhr = new XMLHttpRequest();
	xhr.open('POST', '<%=url("admin/network/enhanced_dhcp/ajax_apply_tag")%>', true);
	xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	
	xhr.onreadystatechange = function() {
		if (xhr.readyState === 4) {
			var success = false;
			if (xhr.status === 200) {
				try {
					var response = JSON.parse(xhr.responseText);
					success = response.success;
				} catch (e) {
					// JSON parse error
				}
			}
			callback(success);
		}
	};
	
	var params = 'mac=' + encodeURIComponent(mac) + 
		'&tag=' + encodeURIComponent(tag) + 
		'&name=' + encodeURIComponent(name);
	xhr.send(params);
}

function showQuickAssignMessage(message, type) {
	var statusDiv = document.getElementById('quick-assign-status');
	var messageSpan = document.getElementById('quick-assign-message');
	
	messageSpan.textContent = message;
	statusDiv.style.display = 'block';
	
	// Set background color based on type
	switch (type) {
		case 'success':
			statusDiv.style.background = '#d4edda';
			statusDiv.style.color = '#155724';
			break;
		case 'error':
			statusDiv.style.background = '#f8d7da';
			statusDiv.style.color = '#721c24';
			break;
		case 'warning':
			statusDiv.style.background = '#fff3cd';
			statusDiv.style.color = '#856404';
			break;
		case 'info':
		default:
			statusDiv.style.background = '#d1ecf1';
			statusDiv.style.color = '#0c5460';
			break;
	}
	
	// Auto-hide after delay for non-error messages
	if (type !== 'error') {
		setTimeout(function() {
			statusDiv.style.display = 'none';
		}, 5000);
	}
}

// Add event listeners to individual checkboxes
document.addEventListener('change', function(e) {
	if (e.target.classList.contains('device-checkbox')) {
		updateSelectAllCheckbox();
	}
});

// Keyboard shortcuts
document.addEventListener('keydown', function(e) {
	if (e.ctrlKey || e.metaKey) {
		switch (e.key) {
			case 'a':
				e.preventDefault();
				selectAllDeviceCheckboxes();
				break;
			case 'd':
				e.preventDefault();
				selectNoneDeviceCheckboxes();
				break;
		}
	}
});
</script>