<%#
Enhanced DHCP Manager - JavaScript for Device Management
%>

<script type="text/javascript">
// Enhanced DHCP Device Management JavaScript

// Validate MAC address format
function validateMacAddress(mac) {
	var macRegex = /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/;
	return macRegex.test(mac);
}

// Validate IP address format
function validateIpAddress(ip) {
	if (ip === '' || ip.toLowerCase() === 'auto') return true;
	var ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
	return ipRegex.test(ip);
}

// Add validation to form inputs
document.addEventListener('DOMContentLoaded', function() {
	// Find all MAC address inputs
	var macInputs = document.querySelectorAll('input[name*="mac"]');
	macInputs.forEach(function(input) {
		input.addEventListener('blur', function() {
			if (this.value && !validateMacAddress(this.value)) {
				this.style.borderColor = '#dc3545';
				this.title = '<%:Invalid MAC address format%>';
			} else {
				this.style.borderColor = '';
				this.title = '';
			}
		});
		
		// Auto-format MAC address
		input.addEventListener('input', function() {
			var value = this.value.replace(/[^0-9A-Fa-f]/g, '');
			var formatted = '';
			for (var i = 0; i < value.length && i < 12; i++) {
				if (i > 0 && i % 2 === 0) {
					formatted += ':';
				}
				formatted += value[i];
			}
			this.value = formatted.toUpperCase();
		});
	});
	
	// Find all IP address inputs
	var ipInputs = document.querySelectorAll('input[name*="ip"]');
	ipInputs.forEach(function(input) {
		input.addEventListener('blur', function() {
			if (this.value && !validateIpAddress(this.value)) {
				this.style.borderColor = '#dc3545';
				this.title = '<%:Invalid IP address format%>';
			} else {
				this.style.borderColor = '';
				this.title = '';
			}
		});
	});
	
	// Add enhanced functionality to tag dropdowns
	var tagSelects = document.querySelectorAll('select[name*="tag"]');
	tagSelects.forEach(function(select) {
		select.addEventListener('change', function() {
			// Visual feedback for tag change
			this.style.background = '#d4edda';
			setTimeout(function() {
				select.style.background = '';
			}, 1000);
		});
	});
	
	// Add tooltips for tag details
	addTagTooltips();
});

// Add tooltips showing tag details
function addTagTooltips() {
	var tagDetails = {
		'default': '<%:Uses system default gateway and DNS settings%>'
		<%
		local uci = require "luci.model.uci".cursor()
		uci:foreach("dhcp", "tag", function(section)
			local tag_name = section[".name"]
			local gateway = ""
			local dns = ""
			local options = section.dhcp_option or {}
			
			for _, opt in ipairs(options) do
				local gw = opt:match("^3,(.+)$")
				if gw then gateway = gw end
				
				local dns_servers = opt:match("^6,(.+)$")
				if dns_servers then dns = dns_servers end
			end
			
			local tooltip = string.format("Gateway: %s\\nDNS: %s", 
				gateway ~= "" and gateway or "Not set",
				dns ~= "" and dns or "Not set")
		%>
		,'<%=tag_name%>': '<%=tooltip%>'
		<% end) %>
	};
	
	var tagSelects = document.querySelectorAll('select[name*="tag"]');
	tagSelects.forEach(function(select) {
		select.title = tagDetails[select.value] || '';
		
		select.addEventListener('change', function() {
			this.title = tagDetails[this.value] || '';
		});
	});
}

// Batch operations
function selectAllDevices() {
	var checkboxes = document.querySelectorAll('input[type="checkbox"][name*="device"]');
	checkboxes.forEach(function(cb) {
		cb.checked = true;
	});
}

function selectNoneDevices() {
	var checkboxes = document.querySelectorAll('input[type="checkbox"][name*="device"]');
	checkboxes.forEach(function(cb) {
		cb.checked = false;
	});
}

function applyTagToSelected(tag) {
	var checkboxes = document.querySelectorAll('input[type="checkbox"][name*="device"]:checked');
	checkboxes.forEach(function(cb) {
		var row = cb.closest('.tr');
		var tagSelect = row.querySelector('select[name*="tag"]');
		if (tagSelect) {
			tagSelect.value = tag;
			tagSelect.dispatchEvent(new Event('change'));
		}
	});
}

// Enhanced device name lookup
function enhanceDeviceNames() {
	// Try to get better device names from hostname resolution
	var macCells = document.querySelectorAll('.cbi-section-table-cell code');
	macCells.forEach(function(cell) {
		var mac = cell.textContent;
		lookupDeviceName(mac, function(name) {
			if (name && name !== 'Unknown') {
				var nameCell = cell.parentNode.parentNode.querySelector('.cbi-section-table-cell:first-child input');
				if (nameCell && (!nameCell.value || nameCell.value === 'Unknown')) {
					nameCell.value = name;
				}
			}
		});
	});
}

function lookupDeviceName(mac, callback) {
	// This would make an AJAX call to resolve device names
	// For now, just use the callback with null
	callback(null);
}

// Export/Import functionality
function exportConfiguration() {
	var config = {
		tags: [],
		devices: []
	};
	
	// Collect tag data
	<%
	uci:foreach("dhcp", "tag", function(section)
		local tag_data = {
			name = section[".name"],
			options = section.dhcp_option or {}
		}
	%>
	config.tags.push(<%=luci.json.encode(tag_data)%>);
	<% end) %>
	
	// Collect device data
	<%
	uci:foreach("dhcp", "host", function(section)
		local host_data = {
			name = section.name,
			mac = section.mac,
			ip = section.ip,
			tag = section.tag
		}
	%>
	config.devices.push(<%=luci.json.encode(host_data)%>);
	<% end) %>
	
	// Download as JSON
	var blob = new Blob([JSON.stringify(config, null, 2)], {type: 'application/json'});
	var url = URL.createObjectURL(blob);
	var a = document.createElement('a');
	a.href = url;
	a.download = 'enhanced-dhcp-config.json';
	a.click();
	URL.revokeObjectURL(url);
}

// Auto-save functionality (draft save)
var autoSaveTimeout;
function enableAutoSave() {
	var inputs = document.querySelectorAll('input, select');
	inputs.forEach(function(input) {
		input.addEventListener('change', function() {
			clearTimeout(autoSaveTimeout);
			autoSaveTimeout = setTimeout(function() {
				showAutoSaveIndicator();
			}, 2000);
		});
	});
}

function showAutoSaveIndicator() {
	var indicator = document.getElementById('auto-save-indicator');
	if (!indicator) {
		indicator = document.createElement('div');
		indicator.id = 'auto-save-indicator';
		indicator.style.position = 'fixed';
		indicator.style.top = '10px';
		indicator.style.right = '10px';
		indicator.style.background = '#28a745';
		indicator.style.color = 'white';
		indicator.style.padding = '5px 10px';
		indicator.style.borderRadius = '3px';
		indicator.style.fontSize = '12px';
		indicator.style.zIndex = '9999';
		document.body.appendChild(indicator);
	}
	
	indicator.textContent = '<%:Changes detected%>';
	indicator.style.display = 'block';
	
	setTimeout(function() {
		indicator.style.display = 'none';
	}, 2000);
}

// Initialize enhanced features
document.addEventListener('DOMContentLoaded', function() {
	enhanceDeviceNames();
	enableAutoSave();
});
</script>